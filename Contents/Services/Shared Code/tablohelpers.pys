import pprint
'''#########################################   
	Author:  @PiX64  - Reid, Michael
			 @DavidVR - Van Ronk, David

	Source:

	Purpose:

	Legal:
#########################################'''
LOG_PREFIX 		= "***TabloTV: "
debugit = True

'''#########################################
	Name: GetThumb()

	Parameters: None

	Purpose:

	Returns:

	Notes:
#########################################'''
def GetThumb(imageID):
	return GetFanart(imageID)

'''#########################################
	Name: GetFanart()

	Parameters: None

	Purpose: PROBABLY wont be used! REMOVED

	Returns:

	Notes:
#########################################'''
def GetFanart(imageID):
	url = "http://1.2.3.4/stream/thumb?id="+str(imageID)
	Log(LOG_PREFIX + "Image to call = %s" + url)
	return url

'''#########################################
	Name: PlexLog()

	Parameters: None

	Handler:

	Purpose: Central Control of logging

	Returns:

	Notes:
#########################################'''
def PlexLog(location, message):
	Log(LOG_PREFIX + str(location) + ': ' + pprint.pformat(message))
	return True

'''#########################################
	Name: Encodeobj()

	Parameters: None

	Purpose:

	Returns:

	Notes:
#########################################'''
def Encodeobj(location, message):

	encodedpart = JSON.StringFromObject(message)

	url = 'tablo://'+ str(location) + '/' + String.Encode(encodedpart)

	#Log('Encode: ' + url)
	return url

'''#########################################
	Name: Decodeobj()

	Parameters: None

	Purpose:

	Returns:

	Notes:
#########################################'''
def Decodeobj(location, message):
	encodedobj = message.replace('tablo://'+ str(location) + '/',"")
	#Log('decode: ' + encodedobj)

	encodedobj = String.Decode(encodedobj)


	decodedobj = JSON.ObjectFromString(encodedobj)
	#decodedobj = getEpisodeDict(encodedobj['url'],encodedobj['private_ip'])
	return decodedobj


'''#########################################
	Name: TabloAPI()

	Parameters: None

	Purpose:

	Returns:

	Notes:
		Returns result so that test for error can be handled in calling function
#########################################'''
def TabloAPI(url,cmd,parms):
	debugit = False
	Log(LOG_PREFIX + "Starting TabloAPI Call")
	if debugit:
		Log(LOG_PREFIX + "cmd" + pprint.pformat(cmd))
	request = {"jsonrpc":2.0,"id":"1","method": str(cmd),"params": parms}

	if debugit:
		Log(LOG_PREFIX + "request" + pprint.pformat(request))
	try:
		values = JSON.StringFromObject(request)
		result = JSON.ObjectFromString(str(HTTP.Request(url ,values=None, headers={}, cacheTime=60, encoding=None, errors=None, timeout=30, immediate=False, sleep=0, data=values)))
	except Exception as e:
		Log(LOG_PREFIX + "Error when calling TabloAPI. Exception = %s",e)
		return e
	if debugit:
		Log(LOG_PREFIX + pprint.pformat(result))
		Log(LOG_PREFIX + "End TabloAPI Call")
	return result

'''#########################################
	Name: loadData()

	Parameters: None

	Handler: @route

	Purpose:

	Returns:

	Notes:
#########################################'''
def loadData(Dict):

		ipaddress = str(Dict['private_ip'])


		episodelistids = JSON.ObjectFromURL('http://' + ipaddress + ':18080/plex/rec_ids', values=None, headers={}, cacheTime=60)


		#hash = Hash.MD5(JSON.StringFromObject(episodelistids))
		markforreload = True
		if "tablo" not in Dict:
			Dict["tablo"] = {}
		epicount = 0
		starttime = Datetime.Now()
		mySeries = {}
		if markforreload :
			Log('Feeding')
			#Feed in new Data
			for episode in episodelistids['ids']:

				epinum = str(episode)
				if epinum not in Dict["tablo"] and epicount < 999:
					try:

						episodeDict = getEpisodeDict(ipaddress,epinum,True)

						Dict["tablo"][epinum]= episodeDict
						epicount = epicount + 1
					except Exception as e:
						Log("Parse Failed on jsonurl " + str(e))
			Log('Cleaning')
			#Feed in new Data
			Temp = Dict["tablo"].copy()
			for episode in Temp:
				if not int(episode) in episodelistids['ids']:
					try:
						Log('deleting ' + episode)
						del Dict["tablo"][episode]
					except Exception as e:
						Log("Parse Failed on delete key " + str(e))




		#Log(myDict)






'''#########################################
	Name: getEpisodeDict()

	Parameters: None

	Purpose:

	Returns:

	Notes:
#########################################'''
def getEpisodeDict(ipaddress,episodeID,UseMeta):
	episodeDict = {}
	episodeDict['url'] = 'http://' + ipaddress + ':18080/pvr/' + episodeID +'/'

	if UseMeta:
		meta_url = episodeDict['url'] + 'meta.txt'
		episodeobj = {}
		# Request the URL
		try:
			episodeinfo = JSON.ObjectFromURL(meta_url, cacheTime=7200)
		except Exception as e:
			Log(LOG_PREFIX+'call to meta.txt failed. File not found')
			return e
	else:
		episodeobj = JSON.ObjectFromURL('http://' + ipaddress + ':18080/plex/rec_info?id=' + episodeID, values=None, headers={}, cacheTime=60)

	if 'meta' in episodeobj or UseMeta:
		if UseMeta == False:
			episodeinfo = episodeobj['meta']
		episodeDict['private_ip'] = ipaddress
		episodeDict['episodeID'] = episodeID
		if 'episodeTitle' in episodeinfo['recEpisode']['jsonFromTribune']['program']:

			episodeDict['title']  = episodeinfo['recEpisode']['jsonFromTribune']['program']['episodeTitle']
		else:
			episodeDict['title'] = episodeinfo['recEpisode']['jsonFromTribune']['program']['title']
		#Description is not always in the JSON, so test first
		if 'description' in episodeinfo['recEpisode']['jsonForClient']:
			episodeDict['summary'] = episodeinfo['recEpisode']['jsonForClient']['description']
		else:
			episodeDict['summary'] =	'No Description Available'
		episodeDict['showname'] = episodeinfo['recEpisode']['jsonFromTribune']['program']['title']
		episodeDict['showid'] = episodeinfo['recSeries']['jsonFromTribune']['seriesId']
		#convert to seconds
		if 'duration' in episodeinfo['recEpisode']['jsonForClient']['video']:
			#convert to seconds
			episodeDict['duration']  = int(episodeinfo['recEpisode']['jsonForClient']['video']['duration']) *1000
		else:
			episodeDict['duration'] = 0

		episodeDict['video'] = episodeinfo['recEpisode']['jsonForClient']['video']
		episodeDict['seasonnum'] = int(episodeinfo['recEpisode']['jsonForClient']['seasonNumber'])
		episodeDict['episodenum'] = int(episodeinfo['recEpisode']['jsonForClient']['episodeNumber'])
		episodeDict['airdate'] = episodeinfo['recEpisode']['jsonForClient']['airDate']
		episodeDict['seriesId'] = episodeinfo['recSeries']['jsonFromTribune']['seriesId']
		episodeDict['seriesdesc'] = ''
		if 'shortDescription' in episodeinfo['recSeries']['jsonFromTribune']:
			episodeDict['seriesdesc'] = episodeinfo['recSeries']['jsonFromTribune']['shortDescription']

		#use image url to retrieve show images.  Snap.jpg isn't always available
		episodeDict['seriesthumb'] = episodeDict['url'] + 'snap.jpg'
		episodeDict['backgroundart'] = episodeDict['url'] + 'snap.jpg'
		if 'imageJson' in episodeinfo['recSeries']:
			for seriesimage in episodeinfo['recSeries']['imageJson']['images']:
				#Log(LOG_PREFIX + 'imageType = %s', seriesimage['imageType'])
				if seriesimage['imageType'] == 'iconic_4x3_large':
				   episodeDict['backgroundart'] = 'http://' + ipaddress + '/stream/thumb?id=' + str(seriesimage['imageID'])
				if seriesimage['imageType'] == 'series_3x4_small':
					episodeDict['seriesthumb'] = 'http://' + ipaddress + '/stream/thumb?id=' + str(seriesimage['imageID'])


		episodeDict['showtotalepisodes'] = int(episodeinfo['recSeries']['jsonFromTribune']['totalEpisodes'])

	return episodeDict

'''#########################################
	Name: GetTabloIP()

	Parameters: None

	Handler:

	Purpose: Central Control of logging

	Returns:

	Notes:
#########################################'''
def getTabloIP():
	PlexLog(LOG_PREFIX , "Starting getTabloIP Call")

	url = 'https://api.tablotv.com/assocserver/getipinfo/'
	try:
		if Prefs['ipoveride'] != '':
			PlexLog('pref','using overidge')
			tablo = {}
			tablo['public_ip'] = Prefs['ipoveride']
			tablo['private_ip'] = Prefs['ipoveride']
			return tablo
	except Exception as e:
		PlexLog("Error when calling getTabloIPPrefs" ,e)
	try:
		result = JSON.ObjectFromURL(url)

	except Exception as e:
		PlexLog("Error when calling getipinfo" ,e)
		return e

	PlexLog("result of json call ",result)
	PlexLog('GetTabloIP',result)
	if 'success' in result:
		return result['cpes']

	else:
		return ''

